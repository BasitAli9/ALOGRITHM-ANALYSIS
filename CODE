import java.util.Arrays;

public class SortingAnalysisJava {

    // --- Sorting Algorithms ---

    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n-1; i++)
            for (int j = 0; j < n-i-1; j++)
                if (arr[j] > arr[j+1]) {
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
    }

    public static void selectionSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n-1; i++) {
            int min_idx = i;
            for (int j = i+1; j < n; j++)
                if (arr[j] < arr[min_idx])
                    min_idx = j;
            int temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }
    }

    public static void insertionSort(int[] arr) {
        int n = arr.length;
        for (int i = 1; i < n; ++i) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j+1] = arr[j];
                j = j-1;
            }
            arr[j+1] = key;
        }
    }

    public static void mergeSort(int arr[], int l, int r) {
        if (l < r) {
            int m = l+(r-l)/2;
            mergeSort(arr, l, m);
            mergeSort(arr, m+1, r);
            merge(arr, l, m, r);
        }
    }

    public static void merge(int arr[], int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;
        int L[] = new int[n1];
        int R[] = new int[n2];

        for (int i=0; i<n1; ++i)
            L[i] = arr[l + i];
        for (int j=0; j<n2; ++j)
            R[j] = arr[m + 1+ j];

        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    // --- Timer and Main Program ---

    public static double measureTime(Runnable sortFunction) {
        long start = System.nanoTime();
        sortFunction.run();
        long end = System.nanoTime();
        return (end - start) / 1000.0;  // convert to microseconds
    }

    public static void main(String[] args) {

        int[] arr1 = {5,4,3,2,1};
        int[] arr2 = {10,9,8,7,6,5,4,3,2,1};
        int[] arr3 = new int[50];
        int[] arr4 = new int[100];

        for (int i = 0; i < 50; i++) arr3[i] = 50 - i;
        for (int i = 0; i < 100; i++) arr4[i] = 100 - i;

        int[][] datasets = {arr1, arr2, arr3, arr4};
        int[] sizes = {5, 10, 50, 100};

        System.out.println("Input Size\tBubble Sort\tSelection Sort\tInsertion Sort\tMerge Sort (Âµs)");

        for (int i = 0; i < datasets.length; i++) {
            int[] base = datasets[i];

            double bubbleTime = 0;
            double selectionTime = 0;
            double insertionTime = 0;
            double mergeTime = 0;

            for (int j = 0; j < 5; j++) { // 5 runs

                int[] arrBubble = Arrays.copyOf(base, base.length);
                int[] arrSelection = Arrays.copyOf(base, base.length);
                int[] arrInsertion = Arrays.copyOf(base, base.length);
                int[] arrMerge = Arrays.copyOf(base, base.length);

                bubbleTime += measureTime(() -> bubbleSort(arrBubble));
                selectionTime += measureTime(() -> selectionSort(arrSelection));
                insertionTime += measureTime(() -> insertionSort(arrInsertion));
                mergeTime += measureTime(() -> mergeSort(arrMerge, 0, arrMerge.length - 1));
            }

            bubbleTime /= 5.0;
            selectionTime /= 5.0;
            insertionTime /= 5.0;
            mergeTime /= 5.0;

            System.out.printf("%d\t\t%.6f\t%.6f\t%.6f\t%.6f\n", sizes[i], bubbleTime, selectionTime, insertionTime, mergeTime);
        }
    }
}
